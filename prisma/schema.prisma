datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid()) // next-auth doesn't support UUIDs for its models.
  name          String    @default("")
  email         String    @unique
  emailVerified DateTime? @map("email_verified")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts Account[]
  origins  Origin[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Verification tokens are immutable so no need to store `updatedAt` info.
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model WaitlistUser {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique

  role             String
  useCases         String? @map("use_cases")
  howThisCouldHelp String? @map("how_this_could_help")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("waitlist_users")
}

model Origin {
  id     String @id @default(uuid()) @db.Uuid
  name   String @unique
  slug   String @unique
  apiKey String @unique @default(uuid()) @map("api_key") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  metrics Metric[]

  @@map("origins")
}

model Metric {
  id         String @id @default(uuid()) @db.Uuid
  path       String
  method     String
  timeMillis Int    @map("time_millis")

  // Metrics are immutable so no need to store `updatedAt` info.
  createdAt DateTime @default(now()) @map("created_at")

  originId String @map("origin_id") @db.Uuid
  origin   Origin @relation(fields: [originId], references: [id], onDelete: Cascade)

  @@map("metrics")
}
